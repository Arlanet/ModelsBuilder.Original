using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using NUnit.Framework;
using Umbraco.Core.Composing;
using Umbraco.Core.Configuration.UmbracoSettings;
using ZpqrtBnk.ModelsBuilder.Api;
using ZpqrtBnk.ModelsBuilder.Building;
using ZpqrtBnk.ModelsBuilder.Configuration;

namespace ZpqrtBnk.ModelsBuilder.Tests
{
    [TestFixture]
    public class CustomBuilderTests
    {
        private Config _config;

        [SetUp]
        public void Setup()
        {
            _config = new Config();

            Current.Reset();
            Current.UnlockConfigs();
            Current.Configs.Add(() => _config);
            Current.Configs.Add<IUmbracoSettingsSection>(() => new UmbracoSettingsSection());
        }

        [Test]
        public void CustomNames()
        {
            var type1 = new TypeModel
            {
                Id = 1,
                Alias = "type1",
                ParentId = 0,
                BaseType = null,
                ItemType = TypeModel.ItemTypes.Content,
            };
            type1.Properties.Add(new PropertyModel
            {
                Alias = "prop1",
                ModelClrType = typeof(string),
            });

            var types = new List<TypeModel> { type1 };

            var code = new Dictionary<string, string>
            {
                {"assembly", @"
using ZpqrtBnk.ModelsBuilder;
"}
            };

            var refs = new[]
            {
                MetadataReference.CreateFromFile(typeof (string).Assembly.Location),
                MetadataReference.CreateFromFile(typeof (ReferencedAssemblies).Assembly.Location)
            };

            var parseResult = new CodeParser().Parse(code, refs);
            parseResult.SetGeneratePropertyGetters(true); // preserve legacy

            var model = new CodeModel { TypeModels = types };
            new CustomNamesBuilder().Build(model, _config, parseResult, null);
            var writer = new CodeWriter(model);
            writer.WriteModelFile(types.First());
            var gen = writer.Code;

            var version = ApiVersion.Current.Version;
            var expected = @"//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    ZpqrtBnk.ModelsBuilder v" + version + @"
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using ZpqrtBnk.ModelsBuilder;
using ZpqrtBnk.ModelsBuilder.Umbraco;
using System.CodeDom.Compiler;

namespace Umbraco.Web.PublishedModels
{
    /// <summary>Provides extension methods for the Type1Custom class.</summary>
    public static partial class Type1CustomExtensions
    {
        /// <summary>Gets the value of the ""prop1"" property.</summary>
        [GeneratedCodeAttribute(ModelInfos.Name, ModelInfos.VersionString)]
        public static string Prop1(this Type1Custom that, Fallback fallback = default, string defaultValue = default)
            => that.Value<string>(ModelInfos.ContentTypes.Type1Custom.Properties.Prop1.Alias, fallback: fallback, defaultValue: defaultValue);
    }

    /// <summary>Represents a ""type1"" content item.</summary>
    [PublishedModel(ModelInfos.ContentTypes.Type1Custom.Alias)]
    public partial class Type1Custom : PublishedContentModel
    {
        public Type1Custom(IPublishedContent content)
            : base(content)
        { }

        /// <summary>Gets the value of the ""prop1"" property.</summary>
        [GeneratedCodeAttribute(ModelInfos.Name, ModelInfos.VersionString)]
        [ImplementPropertyType(ModelInfos.ContentTypes.Type1Custom.Properties.Prop1.Alias)]
        public string Prop1 => this.Prop1();
    }
}
";
            Console.WriteLine(gen);
            Assert.AreEqual(expected.ClearLf(), gen);
        }

        private class CustomNamesBuilder : Builder
        {
            public override string GetClrName(TypeModel typeModel, ParseResult parseResult, Config config)
            {
                return base.GetClrName(typeModel, parseResult, config) + "Custom";
            }
        }
    }
}
